name: test

on:
  workflow_dispatch:
  pull_request:
    types: [ opened, synchronize ]
  push:
    branches:
      - main

concurrency:
  group: test-${{ github.ref }}
  cancel-in-progress: true

env:
  FLUTTER_VERSION: '3.10.2'

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      src: ${{ steps.filter.outputs.src }}
      dependencies: ${{ steps.filter.outputs.dependencies }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            src:
              - 'lib/**'
              - 'test/**'
              - 'pubspec.yaml'
            dependencies:
              - 'pubspec.yaml'
              - 'pubspec.lock'

  test:
    needs: changes
    if: ${{ needs.changes.outputs.src == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Retrieve the secret and decode it to a file
        env:
          APP_ENV: ${{ secrets.APP_ENV }}
          DEV_ENV: ${{ secrets.DEV_ENV }}
          PROD_ENV: ${{ secrets.PROD_ENV }}
        run: |
          if [ -z "$APP_ENV" ]; then
            echo "Error: APP_ENV is empty"
            exit 1
          fi
          if [ -z "$DEV_ENV" ]; then
            echo "Error: DEV_ENV is empty"
            exit 1
          fi
          if [ -z "$PROD_ENV" ]; then
            echo "Error: PROD_ENV is empty"
            exit 1
          fi

          echo $APP_ENV | base64 --decode > .env || { echo "Error decoding APP_ENV"; exit 1; }
          echo $DEV_ENV | base64 --decode > .env.dev || { echo "Error decoding DEV_ENV"; exit 1; }
          echo $PROD_ENV | base64 --decode > .env.prod || { echo "Error decoding PROD_ENV"; exit 1; }

      - name: fvm
        uses: kuhnroyal/flutter-fvm-config-action@v1
        id: fvm-config-action

      - name: install flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ steps.fvm-config-action.outputs.FLUTTER_VERSION }}
          channel: ${{ steps.fvm-config-action.outputs.FLUTTER_CHANNEL }}

      - name: Cache Flutter dependencies
        uses: actions/cache@v3
        with:
          path: |
            ${{ env.FLUTTER_HOME }}/.pub-cache
            ${{ env.FLUTTER_HOME }}/bin/cache
          key: ${{ runner.os }}-flutter-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: |
            ${{ runner.os }}-flutter-

      - name: Debug dependencies
        run: |
          flutter pub deps

      - name: Clear Flutter cache
        run: |
          flutter pub cache repair

      - name: Install dependencies
        run: |
          flutter pub get
          flutter pub upgrade

      - name: Analyze
        run: |
          flutter analyze

      - name: Format
        run: |
          flutter format --set-exit-if-changed .

      - name: build runner
        run: |
          flutter pub run build_runner build --delete-conflicting-outputs

      - name: Test
        run: |
          flutter test --machine > test_report.log

      - name: Report test
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: "flutter test"
          path: "test_report.log"
          reporter: "flutter-json"
          fail-on-error: "true"

  status-check:
    runs-on: ubuntu-latest
    needs: test
    if: failure()
    steps:
      - run: exit 1